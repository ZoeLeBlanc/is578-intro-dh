9346	2020	As this year's conference theme suggests, Digital Humanities finds itself on the intersection between many different "disciplines, methodologies, and pedagogies" (Estill and Guiliano 2019). But while this intrinsic interdisciplinarity (see e.g. Klein 2015) can be regarded as one of the research field's chief assets, it quickly becomes a considerable hurdle in the classroom. As Ryan Cordell suggests, we tend to overestimate the technical skills of our ‘tech-savvy,’ ‘digital native’ students – and perhaps even the general affinity they have towards digital tools and methodologies (Cordell 2016, 465). Without a formalized technical or computational background, the skills our students  bring to the table rely heavily on their individual interests, experiences, and auto-didacticism. This situation culminates in a heterogenous classroom that makes it difficult to assess where the gaps in each of the students' knowledge lie, and how they can be bridged. As such, the teacher's first task becomes to decide which basic skills the students will need for their digital research. As a result, technical DH courses often focus on teaching students specific skills that can be used in specific contexts to achieve specific research results, such as: How to use TEI-XML to encode a text-bearing object; How to use python to query a corpus of digital texts; How to use R to perform a stylometric analysis; How to use GIS frameworks to map data layers onto geographical zones; etc.As Mahony and Pierazzo argued in 2012, however, more than teaching such purely technical skills there is "a need for teaching methodological approaches". Rather than teaching students to use new technologies, we need to teach them how those technologies work: how their methodological constraints affect our data; how they determine what we can and cannot do with our data; and how seemingly simple data processing steps imply "interpretative decisions that change the nature of the data and how it can be validly interpreted". Still the question remains: "What are the right basic requirements" for our students? (Scagliola et al. 2019) – Where do we start?In this paper, we propose a 'minimal digital pedagogy' that applyies the principles of Minimal Computing in the classroom. As a working group of ADHO's GO:DH Special Interest Group, Minimal Computing sets out to rethink DH work for areas in the world where factors such as high-end hardware, software, network capacity, power, etc. are not a given, by performing our computational research "under some set of significant constraints." It is precisely such constraints, we believe, that allow us to get to the fundamentals of the technologies we are using – and to give our students a critical understanding of the tools they are using by building and configuring them from the ground up.This is the setup we have adopted for the Antwerp Summer School in DH – an intensive one-week summer school that aims to teach students the basics of developing and hosting their own digital archives and editions. In the last two years, we have developed a tutorial for deploying a IIIF-compliant image server on a local network of Raspberry Pis (RPi). At the next iteration of the summer school, we want to take this setup one step further by teaching students how develop a full-fledged Digital Scholarly Edition based on those reproductions. Much to our continued surprise, experience tells us that all of this is possible on a RPi. These affordable light-weight minicomputers the size of a credit card were originally designed to teach digital novices (especially children) computing and digital making skills, but have recently been successfully used in higher education classrooms as well. In our specific setup, students used RPis to up a Local Area Network where they installed, configured, and controlled web-based tools to host, share, and reuse digital reproductions of manuscripts with each other. This collaborative act of building a private network offered them a practical way to learn more about and play with fundamental computing concepts. In particular, through a series of tutorial instructions, integrated exercises, and group discussions, they were exposed to issues in physical computational and networking infrastructures; to working with unfamiliar operating systems; to operating a computer without an interface (command line); to communicating with and controlling other computers (SSH); to a number of data formats and markup languages (HTML, XML, CSS, JSON, Pyramid TIFF, etc.); and – crucially – they learned to approach important technological standards and complex digital frameworks (such as IIIF) from a developer’s perspective rather than from a user’s.But alongside the advantages of learning-by-building (Clement 2012; Ramsay and Rockwell 2012) and its applicability to a range of DH technologies, adopting a minimal computing approach to DH pedagogy has other benefits as well. To start, the setup is cost efficient: it requires no proprietary software, and can be run quasi-independently of the host institution’s technical infrastructure. A such, the minimal set of hardware for this course requires a onetime investment of around $1,500 – or less than a single up-to-date desktop computer. What is more, if the host institution provides an internet connection without AP isolation and participants bring their own laptops, the entire hardware setup for a course with up to 30 participants may even fit into a standard-sized carry-on trolley. And for students without personal computers, minor adaptations to the tutorial could be considered to provide a similar learning experience. Finally, since our current setup only uses the internet to update and download free Linux packages (which might be provided via a local repository within the RPi network), it may even be possible to teach this course without an internet connection. As such, this portable and independent setup would allow us to teach DH in areas with limited access to digital infrastructures – a setup that we hope to try out at a collaborating university in the Philippines.
